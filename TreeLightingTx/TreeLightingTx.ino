// OLED
#include <Adafruit_SSD1306.h>
#include <splash.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

//logos
const unsigned char HIP [] PROGMEM = {
  // 'HIP logo, 128x32px
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x08, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x06, 0x80, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x02, 0x16, 0xb0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x04, 0xb6, 0xfb, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x07, 0xb5, 0xff, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x03, 0x80, 0x07, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xc0, 0x40, 0x81, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x0f, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 
  0xff, 0xbf, 0xbf, 0x7e, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xbf, 0x7f, 0xbf, 0xff, 0xff, 0xe7, 0xff, 
  0xff, 0x30, 0x60, 0xc1, 0x83, 0x80, 0x3f, 0x00, 0x70, 0xff, 0xc0, 0xc1, 0x01, 0x80, 0x13, 0xff, 
  0xff, 0x30, 0xe1, 0x00, 0x47, 0xc4, 0x07, 0x88, 0xf1, 0xd1, 0xc0, 0x21, 0x80, 0x04, 0x33, 0xff, 
  0xff, 0x99, 0xf0, 0x1c, 0x47, 0xc6, 0x63, 0x8c, 0xf3, 0xd1, 0xe7, 0x11, 0x8e, 0x0c, 0x47, 0xff, 
  0xff, 0x99, 0xf0, 0x3e, 0x07, 0xc6, 0x73, 0x8e, 0x73, 0xff, 0xe7, 0x01, 0x8e, 0x08, 0x87, 0xff, 
  0xff, 0xdb, 0xf0, 0x3e, 0x07, 0xc6, 0x71, 0x06, 0x66, 0x54, 0x67, 0x00, 0x8e, 0x03, 0x0f, 0xff, 
  0xff, 0xd8, 0x00, 0x3f, 0x07, 0xc6, 0x71, 0x27, 0x27, 0x44, 0xe7, 0x04, 0xce, 0x03, 0x3f, 0xff, 
  0xff, 0xd8, 0x00, 0x7f, 0x07, 0xc6, 0x78, 0x67, 0x8f, 0x5e, 0x62, 0x0c, 0xc4, 0x43, 0x3f, 0xff, 
  0xff, 0xd3, 0xf0, 0x7f, 0x07, 0xc6, 0x78, 0x03, 0x8f, 0xff, 0xe0, 0x40, 0x40, 0xc1, 0x9f, 0xff, 
  0xff, 0xd3, 0xf0, 0x7e, 0x07, 0x86, 0xf0, 0x73, 0x9e, 0x67, 0xe7, 0xcc, 0x01, 0xc1, 0xdf, 0xff, 
  0xff, 0x93, 0xf0, 0x3e, 0x07, 0x06, 0xf0, 0x73, 0x9e, 0x00, 0x67, 0xdf, 0x00, 0xc8, 0xc7, 0xff, 
  0xff, 0x91, 0xf2, 0x3c, 0x40, 0x04, 0x00, 0xf9, 0x9c, 0x00, 0x07, 0x9f, 0x08, 0x4c, 0x77, 0xff, 
  0xff, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x02, 0x0c, 0x04, 0x00, 0x33, 0xff, 
  0xff, 0x17, 0xff, 0xc1, 0xdf, 0x3d, 0xff, 0xff, 0xe0, 0x00, 0x0f, 0xff, 0xfe, 0x3f, 0xf9, 0xff, 
  0xff, 0x80, 0x07, 0x7e, 0x01, 0xc0, 0x00, 0x9f, 0xc0, 0x00, 0x07, 0x91, 0xe2, 0x1f, 0xf9, 0xff, 
  0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x07, 0xcd, 0xff, 
  0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x19, 0xff, 
  0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xfc, 0x30, 0x31, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xc3, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0x80, 0x07, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
const unsigned char logo [] PROGMEM = {
  // '1200px-Six_Flags_logo, 128x32px
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1e, 0x40, 0x0f, 0xf9, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7f, 0x78, 0x07, 0xf9, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7e, 0x40, 0x03, 0xf9, 0xfb, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x70, 0x76, 0x73, 0xf9, 0xc3, 0x3e, 0x7f, 0x7c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7c, 0x67, 0x67, 0xf1, 0x83, 0x3e, 0xfe, 0xf8, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7f, 0x63, 0xe7, 0xf1, 0xf7, 0x06, 0xc6, 0xe0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0x63, 0xc7, 0xf1, 0xf7, 0x7e, 0xc6, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x63, 0xc7, 0xf3, 0x87, 0xe6, 0xfe, 0x3c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x67, 0x67, 0xe0, 0x03, 0x87, 0xe6, 0x7c, 0x0c, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xfe, 0x6e, 0xe6, 0x03, 0x87, 0xfe, 0x06, 0xfc, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7c, 0x6e, 0x77, 0xf3, 0x87, 0x76, 0x06, 0x78, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Wireless
#include <SPI.h> // to communicate with the module
#include <nRF24L01.h> // library
#include <RF24.h>
RF24 radio(7, 8);
const byte numRx = 5;
const byte rxAddress[numRx][6] = {
  {'R', 'x', '6', 'F', '1'},
  {'R', 'x', '6', 'F', '2'},
  {'R', 'x', '6', 'F', '3'},
  {'R', 'x', '6', 'F', '4'},
  {'R', 'x', '6', 'F', '5'}
};
bool rxState[numRx];
const byte channel = "108";
const char lightsOn[32] = "LightsOn";
const char lightsOff[32] = "LightsOff";
const char hello[32] = "ping";
//String dataToSend = "";

// Status system
char lastRx[10] = "ARMED";

// Timing
long lastTx = 0;

// Pin Setup
const int onPin = 3;
const int offPin = 4;
const int armPin = 5;

// transmission function
void transmit(int command) {
  for (byte n = 0; n < numRx; n++) {
    radio.stopListening();
    radio.openWritingPipe(rxAddress[n]);
    //delay(30);
    bool rslt;
    if (command == 1) {
      //strcpy(dataToSend,"LightsOn");
      rslt = radio.write( &lightsOn, sizeof(lightsOn));
    }
    else if (command == 2) {
      //strcpy(dataToSend,"LightsOff");
      rslt = radio.write( &lightsOff, sizeof(lightsOff));
    }
    else {
      //strcpy(dataToSend,"ping");
      rslt = radio.write( &hello, sizeof(hello));
    }
    //Serial.println(dataToSend);
    rxState[n] = rslt;
  }
}

void txTest() {
  transmit(0);
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.setTextColor(WHITE);
  int numErrors = 0;
  for (byte n = 0; n < numRx; n++) {
    if (!rxState[n]) {
      display.println("Rx " + String(n + 1) + " Missing");
      numErrors = numErrors + 1;
    }
  }
  if (numErrors == 0) {
    display.setTextSize(2);
    display.write("");
    //display.display();
  }
  display.display();
}

void setup() {
  Serial.begin(9600);
  // Start Radio
  radio.begin();
  radio.setPALevel(RF24_PA_MAX);
  //radio.setChannel(channel);
  radio.setRetries(3, 10);
  //radio.setDataRate(RF24_250KBPS); // Lower rate, longer distance
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.clearDisplay();
  display.drawBitmap(0, 0, logo, 128, 32, WHITE);
  display.display();
  delay(1000);
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.setTextColor(WHITE);
  display.println("Powered by");
  display.println("Firehound");
  display.println("Production");
  display.println("Solutions");
  display.display();
  delay(1000);
  display.clearDisplay();

  // start inputs
  pinMode(onPin, INPUT_PULLUP);
  pinMode(offPin, INPUT_PULLUP);
  pinMode(armPin, INPUT_PULLUP);


  // Establish starting statuses
  for (byte i = 0; i < numRx; i++) {
    rxState[i] = 0;
  }
}

void loop() {
  // put your main code here, to run repeatedly:
  if (digitalRead(armPin) == HIGH) {
    display.clearDisplay();
    display.drawBitmap(0, 0, HIP, 128, 32, WHITE);
    display.display();
  }
  else {
    display.clearDisplay();
    display.setTextSize(2);
    display.setCursor(0, 0);
    display.setTextColor(WHITE);
    display.write(lastRx);
    display.display();
    if (digitalRead(onPin) == LOW) {
      transmit(1);
      lastRx[10] = "ON";
    }
    else if (digitalRead(offPin) == LOW) {
      transmit(2);
      lastRx[10] = "OFF";
    }
    else {
      // loop and wait for input!
    }
  }
}

/*
  if (radio.available()) {
  char text[32] = "";
  radio.read(&text, sizeof(text));
  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0,0);
  display.setTextColor(WHITE);
  display.println(text);
  display.display();
  lastRx = millis();
  Serial.println(text);
  }
  else {
  if(millis()-lastRx >=500) {
    display.clearDisplay();
    display.setCursor(0,0);
    display.setTextSize(4);
    display.setTextColor(WHITE);
    display.println(":(");
    display.display();
  }
  }*/
